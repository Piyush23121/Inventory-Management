Seurity config

CSRF stands for Cross-Site Request Forgery.

It’s a type of security attack that tricks a logged-in user into unintentionally
performing an action on a web app — like submitting a form or clicking a hidden link — without their consent.
.

 What CSRF Protection Does

CSRF protection makes sure every “write” request (like POST, PUT, DELETE)
has a unique security token (called a CSRF token).

 This token is generated by the server and must be sent with the request.1
 If the token is missing or invalid, the request is rejected.
This ensures the request truly came from your own site — not an attacker’s.


You’re disabling CSRF prote-ction because:

You’re building a REST API (no forms, no browser sessions).

Your app uses JWT tokens for authentication instead of cookies.

JWT already ensures security, so CSRF protection isn’t needed in this type of setup.

Simple summary:
Concept	Meaning
CSRF	A trick attack that makes you unknowingly send requests while logged in
CSRF Token	A secret code added to prevent fake requests
Disabled in APIs	Because APIs use JWT, not cookies, so it’s unnecessary

//Inshort only register and login is public everythi ng else is protected
.authorizeHttpRequests(auth -> auth //define which end pt need authent
                        .requestMatchers("/api/register","/api/login").permitAll() //alloewd every one to access
                        .anyRequest().authenticated()) //any other end pt req valid jwt token

_____________________________________________________________________________________________________________

JWtAuth Filter
When any request comes in:

This filter runs before the controller.

It checks the Authorization header for a JWT token.

If token is valid → extract email & role → set them in Spring Security Context.

This makes Spring treat the request as already logged-in.

Then it passes control to the next step (your controller).

So, in one line:

JwtAuthFilter checks the JWT on every request to verify who the user is.
